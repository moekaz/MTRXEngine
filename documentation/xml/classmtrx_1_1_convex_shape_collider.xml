<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classmtrx_1_1_convex_shape_collider" kind="class" language="C++" prot="public">
    <compoundname>mtrx::ConvexShapeCollider</compoundname>
    <basecompoundref refid="classmtrx_1_1_collider" prot="public" virt="non-virtual">mtrx::Collider</basecompoundref>
    <derivedcompoundref refid="classmtrx_1_1_a_a_b_b_collider" prot="public" virt="non-virtual">mtrx::AABBCollider</derivedcompoundref>
    <derivedcompoundref refid="classmtrx_1_1_o_o_b_b_collider" prot="public" virt="non-virtual">mtrx::OOBBCollider</derivedcompoundref>
    <includes refid="_convex_shape_collider_8h" local="no">ConvexShapeCollider.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmtrx_1_1_convex_shape_collider_1ade75a49d458581c1a5f52fae1c511a6e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; glm::vec3 * &gt;</type>
        <definition>std::vector&lt;glm::vec3*&gt; mtrx::ConvexShapeCollider::vertices</definition>
        <argsstring></argsstring>
        <name>vertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="107" column="13" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmtrx_1_1_convex_shape_collider_1ab221d490ddcf43f3726fd68cb57e254c" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; glm::vec3 * &gt;</type>
        <definition>std::vector&lt;glm::vec3*&gt; mtrx::ConvexShapeCollider::transformedVertices</definition>
        <argsstring></argsstring>
        <name>transformedVertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="108" column="21" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmtrx_1_1_convex_shape_collider_1a936c2679fccd46d85a33d2abfdca4d31" prot="protected" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool mtrx::ConvexShapeCollider::transformModified</definition>
        <argsstring></argsstring>
        <name>transformModified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="109" column="14" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1a0f07c2d77aa82d29e5a3dd8d925f1d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mtrx::ConvexShapeCollider::ConvexShapeCollider</definition>
        <argsstring>(const ColliderType &amp;colliderType=ColliderType::ConvexShape, const glm::vec3 &amp;center=glm::vec3(), const glm::quat &amp;orientation=glm::angleAxis(0.f, worldUp), const glm::vec3 &amp;scale=glm::vec3(1, 1, 1))</argsstring>
        <name>ConvexShapeCollider</name>
        <param>
          <type>const <ref refid="namespacemtrx_1aba70c7f807f8a862fb9a10445ec82e7c" kindref="member">ColliderType</ref> &amp;</type>
          <declname>colliderType</declname>
          <defval>ColliderType::ConvexShape</defval>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center</declname>
          <defval>glm::vec3()</defval>
        </param>
        <param>
          <type>const glm::quat &amp;</type>
          <declname>orientation</declname>
          <defval>glm::angleAxis(0.f, worldUp)</defval>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>scale</declname>
          <defval>glm::vec3(1, 1, 1)</defval>
        </param>
        <briefdescription>
<para>Construct a new Convex Shape <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colliderType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of collider we are creating. The default is a convex shape however we can have other type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_a_a_b_b_collider" kindref="compound">mtrx::AABBCollider</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_o_o_b_b_collider" kindref="compound">mtrx::OOBBCollider</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center of the collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>The orientation of the collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scale of the collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1af75db8ad0803ab9654f9cd7809a9531d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mtrx::ConvexShapeCollider::ConvexShapeCollider</definition>
        <argsstring>(const ColliderType &amp;colliderType=ColliderType::ConvexShape, const Transform &amp;transform=Transform())</argsstring>
        <name>ConvexShapeCollider</name>
        <param>
          <type>const <ref refid="namespacemtrx_1aba70c7f807f8a862fb9a10445ec82e7c" kindref="member">ColliderType</ref> &amp;</type>
          <declname>colliderType</declname>
          <defval>ColliderType::ConvexShape</defval>
        </param>
        <param>
          <type>const <ref refid="classmtrx_1_1_transform" kindref="compound">Transform</ref> &amp;</type>
          <declname>transform</declname>
          <defval><ref refid="classmtrx_1_1_transform" kindref="compound">Transform</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a new Convex Shape <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colliderType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of collider we are creating. The default is a convex shape however we can have other type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_a_a_b_b_collider" kindref="compound">mtrx::AABBCollider</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_o_o_b_b_collider" kindref="compound">mtrx::OOBBCollider</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>The transform of the collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_transform" kindref="compound">mtrx::Transform</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1aedd243fcc1e07eacab102dace67a3ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mtrx::ConvexShapeCollider::ConvexShapeCollider</definition>
        <argsstring>(const ColliderType &amp;colliderType=ColliderType::ConvexShape, const std::vector&lt; glm::vec3 * &gt; &amp;vertices=std::vector&lt; glm::vec3 * &gt;(), const glm::vec3 &amp;center=glm::vec3(), const glm::quat &amp;orientation=glm::angleAxis(0.f, glm::vec3(0, 1, 0)), const glm::vec3 &amp;scale=glm::vec3(1, 1, 1))</argsstring>
        <name>ConvexShapeCollider</name>
        <param>
          <type>const <ref refid="namespacemtrx_1aba70c7f807f8a862fb9a10445ec82e7c" kindref="member">ColliderType</ref> &amp;</type>
          <declname>colliderType</declname>
          <defval>ColliderType::ConvexShape</defval>
        </param>
        <param>
          <type>const std::vector&lt; glm::vec3 * &gt; &amp;</type>
          <declname>vertices</declname>
          <defval>std::vector&lt; glm::vec3 * &gt;()</defval>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center</declname>
          <defval>glm::vec3()</defval>
        </param>
        <param>
          <type>const glm::quat &amp;</type>
          <declname>orientation</declname>
          <defval>glm::angleAxis(0.f, glm::vec3(0, 1, 0))</defval>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>scale</declname>
          <defval>glm::vec3(1, 1, 1)</defval>
        </param>
        <briefdescription>
<para>Construct a new Convex Shape <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colliderType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of collider we are creating. The default is a convex shape however we can have other type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_a_a_b_b_collider" kindref="compound">mtrx::AABBCollider</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_o_o_b_b_collider" kindref="compound">mtrx::OOBBCollider</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertices of the convex shape collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center of the collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>The orientation of the collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scale of the collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1ad74b9852fb1dbc2eb916d1fc6193a349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mtrx::ConvexShapeCollider::ConvexShapeCollider</definition>
        <argsstring>(const ColliderType &amp;colliderType=ColliderType::ConvexShape, const std::vector&lt; glm::vec3 * &gt; &amp;vertices=std::vector&lt; glm::vec3 * &gt;(), const Transform &amp;transform=Transform())</argsstring>
        <name>ConvexShapeCollider</name>
        <param>
          <type>const <ref refid="namespacemtrx_1aba70c7f807f8a862fb9a10445ec82e7c" kindref="member">ColliderType</ref> &amp;</type>
          <declname>colliderType</declname>
          <defval>ColliderType::ConvexShape</defval>
        </param>
        <param>
          <type>const std::vector&lt; glm::vec3 * &gt; &amp;</type>
          <declname>vertices</declname>
          <defval>std::vector&lt; glm::vec3 * &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="classmtrx_1_1_transform" kindref="compound">Transform</ref> &amp;</type>
          <declname>transform</declname>
          <defval><ref refid="classmtrx_1_1_transform" kindref="compound">Transform</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a new Convex Shape <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colliderType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of collider we are creating. The default is a convex shape however we can have other type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_a_a_b_b_collider" kindref="compound">mtrx::AABBCollider</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_o_o_b_b_collider" kindref="compound">mtrx::OOBBCollider</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertices of the convex shape collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>The transform of the collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>mtrx::Trnasform </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1a3e5b9ef9fc9e22f83abcc20186f2afd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual mtrx::ConvexShapeCollider::~ConvexShapeCollider</definition>
        <argsstring>()</argsstring>
        <name>~ConvexShapeCollider</name>
        <briefdescription>
<para>Destroy the Convex Shape <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="59" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1a44fba7247c98212c60e0eec4e16e74ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool mtrx::ConvexShapeCollider::RaycastCollision</definition>
        <argsstring>(const Ray &amp;ray) override</argsstring>
        <name>RaycastCollision</name>
        <reimplements refid="classmtrx_1_1_collider_1a361c341b949adf2508c46389f8b4509d">RaycastCollision</reimplements>
        <reimplementedby refid="classmtrx_1_1_a_a_b_b_collider_1ac618c2f04d88d448668dcc7efbf513e3">RaycastCollision</reimplementedby>
        <reimplementedby refid="classmtrx_1_1_o_o_b_b_collider_1afa990f428f3044ceb1639816f5d98278">RaycastCollision</reimplementedby>
        <param>
          <type>const <ref refid="classmtrx_1_1_ray" kindref="compound">Ray</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <briefdescription>
<para>Raycast collision check with convex shape colliders. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>The ray that we want to cast </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The ray and the colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The ray and colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="68" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1a73739e13e64f22f948e306e1794ea418" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; glm::vec3 * &gt; *</type>
        <definition>std::vector&lt;glm::vec3*&gt;* mtrx::ConvexShapeCollider::GetVertices</definition>
        <argsstring>() const</argsstring>
        <name>GetVertices</name>
        <briefdescription>
<para>Get the Vertices of the convex shape collider. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;glm::vec3*&gt;* A pointer to the transformed vertices of the collider </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="76" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1a1034fa2d6f51a20b12b060a6264d9cc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>glm::mat4</type>
        <definition>glm::mat4 mtrx::ConvexShapeCollider::GetModelMatrix</definition>
        <argsstring>() const</argsstring>
        <name>GetModelMatrix</name>
        <briefdescription>
<para>Get the Model Matrix of the convex shape collider. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>glm::mat4 The model matrix of the convex shape collider </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="83" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1ab6be6d11c7ef35fa0efa1743ffd82db7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void mtrx::ConvexShapeCollider::SetPosition</definition>
        <argsstring>(const glm::vec3 &amp;pos) override</argsstring>
        <name>SetPosition</name>
        <reimplements refid="classmtrx_1_1_collider_1a0bbed70b7af99a1469b3da9eac7df531">SetPosition</reimplements>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Set the Position of the convex shape collider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The new position of the collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="90" column="21" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1a1de37ecfb1bd42e43201c09c6e5a980f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void mtrx::ConvexShapeCollider::SetScale</definition>
        <argsstring>(const glm::vec3 &amp;scale) override</argsstring>
        <name>SetScale</name>
        <reimplements refid="classmtrx_1_1_collider_1a81b9373f9d09221753255046b9279a5d">SetScale</reimplements>
        <reimplementedby refid="classmtrx_1_1_o_o_b_b_collider_1a7fe953f72faabf2998e9856d68b119f6">SetScale</reimplementedby>
        <reimplementedby refid="classmtrx_1_1_a_a_b_b_collider_1ac0cc88fabe8819ec1578d8999e248eaf">SetScale</reimplementedby>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Set the Scale of the collider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The new scale of the collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="97" column="21" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_convex_shape_collider_1af86aa5dae629acb4076d15dcad004c7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void mtrx::ConvexShapeCollider::SetOrientation</definition>
        <argsstring>(const glm::quat &amp;quat) override</argsstring>
        <name>SetOrientation</name>
        <reimplements refid="classmtrx_1_1_collider_1ac69efe7d26d9e600154f601cbcc30849">SetOrientation</reimplements>
        <reimplementedby refid="classmtrx_1_1_a_a_b_b_collider_1a50a3eed64eb69d3568386978181026da">SetOrientation</reimplementedby>
        <param>
          <type>const glm::quat &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
<para>Set the Orientation of the collider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quat</parametername>
</parameternamelist>
<parameterdescription>
<para>The new orientation of the collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="104" column="21" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" bodystart="104" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of a Convex Shape collider. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>mtrx::AABBCollider</label>
        <link refid="classmtrx_1_1_a_a_b_b_collider"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>mtrx::Collider</label>
        <link refid="classmtrx_1_1_collider"/>
      </node>
      <node id="1">
        <label>mtrx::ConvexShapeCollider</label>
        <link refid="classmtrx_1_1_convex_shape_collider"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mtrx::OOBBCollider</label>
        <link refid="classmtrx_1_1_o_o_b_b_collider"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>mtrx::Transform</label>
        <link refid="classmtrx_1_1_transform"/>
      </node>
      <node id="2">
        <label>mtrx::Collider</label>
        <link refid="classmtrx_1_1_collider"/>
        <childnode refid="3" relation="usage">
          <edgelabel>transform</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>mtrx::ConvexShapeCollider</label>
        <link refid="classmtrx_1_1_convex_shape_collider"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" line="15" column="1" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/ConvexShapeCollider.h" bodystart="14" bodyend="110"/>
    <listofallmembers>
      <member refid="classmtrx_1_1_collider_1af8b907eaf8cb13316dce419f595371df" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>CheckCollision</name></member>
      <member refid="classmtrx_1_1_collider_1a897ee0f8baa05f825be5f96a2abc3bd1" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>Collider</name></member>
      <member refid="classmtrx_1_1_collider_1a1af6daddbfaa7ba34f33845de3b05457" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>Collider</name></member>
      <member refid="classmtrx_1_1_collider_1a8abb09a0eee536698d5a7b5d270ed584" prot="protected" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>colliderId</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1a0f07c2d77aa82d29e5a3dd8d925f1d72" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>ConvexShapeCollider</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1af75db8ad0803ab9654f9cd7809a9531d" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>ConvexShapeCollider</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1aedd243fcc1e07eacab102dace67a3ce3" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>ConvexShapeCollider</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1ad74b9852fb1dbc2eb916d1fc6193a349" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>ConvexShapeCollider</name></member>
      <member refid="classmtrx_1_1_collider_1ac43e5d476507344a3340bae5451ad616" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetColliderId</name></member>
      <member refid="classmtrx_1_1_collider_1aa0eb9dee1d98fd45df1ef8cbfa0e43be" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetColliderType</name></member>
      <member refid="classmtrx_1_1_collider_1afccd3a798fc870d4acbb3c7a3f783c05" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetForward</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1a1034fa2d6f51a20b12b060a6264d9cc2" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetModelMatrix</name></member>
      <member refid="classmtrx_1_1_collider_1ad22caa3bdd6a81cc511a0f9141d8e5ee" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetOrientation</name></member>
      <member refid="classmtrx_1_1_collider_1a6dca0e6b7f19c5582a312af54c34d8e1" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetPosition</name></member>
      <member refid="classmtrx_1_1_collider_1a0e7750440d8bf791c85b87d2e6a6f33a" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetScale</name></member>
      <member refid="classmtrx_1_1_collider_1a59a39aa74953a4a6d228fec5bf3028e8" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetSide</name></member>
      <member refid="classmtrx_1_1_collider_1ac946675c7e0ae86dc77459742511b9ae" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetUp</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1a73739e13e64f22f948e306e1794ea418" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>GetVertices</name></member>
      <member refid="classmtrx_1_1_collider_1a3c8cc45f3a2b276157ea474620f5dcb7" prot="private" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>id</name></member>
      <member refid="classmtrx_1_1_collider_1a056bd024840f5c426fdb9157fd81cf37" prot="public" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>IsConvex</name></member>
      <member refid="classmtrx_1_1_collider_1ad0f9075538c6a8c50ab2137f9172a201" prot="protected" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>isConvexShape</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1a44fba7247c98212c60e0eec4e16e74ec" prot="public" virt="virtual"><scope>mtrx::ConvexShapeCollider</scope><name>RaycastCollision</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1af86aa5dae629acb4076d15dcad004c7c" prot="public" virt="virtual"><scope>mtrx::ConvexShapeCollider</scope><name>SetOrientation</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1ab6be6d11c7ef35fa0efa1743ffd82db7" prot="public" virt="virtual"><scope>mtrx::ConvexShapeCollider</scope><name>SetPosition</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1a1de37ecfb1bd42e43201c09c6e5a980f" prot="public" virt="virtual"><scope>mtrx::ConvexShapeCollider</scope><name>SetScale</name></member>
      <member refid="classmtrx_1_1_collider_1a812b71180496a530dc1a3a1750e4efb1" prot="protected" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>transform</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1ab221d490ddcf43f3726fd68cb57e254c" prot="protected" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>transformedVertices</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1a936c2679fccd46d85a33d2abfdca4d31" prot="protected" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>transformModified</name></member>
      <member refid="classmtrx_1_1_collider_1adf1662048ee02d5d96d430a8a3875433" prot="protected" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>type</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1ade75a49d458581c1a5f52fae1c511a6e" prot="protected" virt="non-virtual"><scope>mtrx::ConvexShapeCollider</scope><name>vertices</name></member>
      <member refid="classmtrx_1_1_collider_1a3d27ae263e0cc1f15b14ec09a715ab7d" prot="public" virt="virtual"><scope>mtrx::ConvexShapeCollider</scope><name>~Collider</name></member>
      <member refid="classmtrx_1_1_convex_shape_collider_1a3e5b9ef9fc9e22f83abcc20186f2afd2" prot="public" virt="virtual"><scope>mtrx::ConvexShapeCollider</scope><name>~ConvexShapeCollider</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
