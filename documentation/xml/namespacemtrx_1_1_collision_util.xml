<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="namespacemtrx_1_1_collision_util" kind="namespace" language="C++">
    <compoundname>mtrx::CollisionUtil</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a25655a61b608ba45dbd96e1bbdcbcb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::SphereSphereCollision</definition>
        <argsstring>(const glm::vec3 &amp;center1, const glm::vec3 &amp;center2, float radius1, float radius2)</argsstring>
        <name>SphereSphereCollision</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center1</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius2</declname>
        </param>
        <briefdescription>
<para>Sphere Sphere collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center1</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the first sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center2</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the second sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius1</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the first sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius2</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the second sphere collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The 2 sphere colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The 2 sphere colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="26" column="6" declfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a058033b88ee093be57383c8e83cd11af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::SphereCapsuleCollision</definition>
        <argsstring>(const glm::vec3 &amp;center1, const glm::vec3 &amp;center2, float radius1, float radius2, const glm::vec3 &amp;A, const glm::vec3 &amp;B)</argsstring>
        <name>SphereCapsuleCollision</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center1</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius2</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Sphere Capsule collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center1</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center2</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the capsule collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius1</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius2</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the capsule collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Topmost sphere center for capsule collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Bottommost sphere center for capsule collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The sphere and capsule colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The sphere and capsule colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="40" column="6" declfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1afb7d2a9972902c2bb02ea8bd304c78e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::SphereAABBCollision</definition>
        <argsstring>(const glm::vec3 &amp;center, const float radius, const glm::vec3 &amp;center1, const float *halfExtents)</argsstring>
        <name>SphereAABBCollision</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>halfExtents</declname>
        </param>
        <briefdescription>
<para>Sphere AABB collider collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center1</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the AABB collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>halfExtents</parametername>
</parameternamelist>
<parameterdescription>
<para>Half Extents of the AABB collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The sphere and AABB colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The sphere and AABB colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="52" column="6" declfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a5bad6fd1b06278cf9d1dda3b2e39de83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::SphereOOBBCollision</definition>
        <argsstring>(const glm::vec3 &amp;center, const float radius, const glm::vec3 &amp;center1, const glm::vec3 *axes, const float *halfExtents)</argsstring>
        <name>SphereOOBBCollision</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center1</declname>
        </param>
        <param>
          <type>const glm::vec3 *</type>
          <declname>axes</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>halfExtents</declname>
        </param>
        <briefdescription>
<para>Sphere OOBB collider collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center1</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the OOBB collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes</parametername>
</parameternamelist>
<parameterdescription>
<para>Axes that define the OOBB world </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>halfExtents</parametername>
</parameternamelist>
<parameterdescription>
<para>Half extent values of OOBB colliders </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Sphere and OOBB colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false Sphere and OOBB colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="65" column="6" declfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a7d3bc9990e9c0e816aeae56126aaaa25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::CapsuleCapsuleCollision</definition>
        <argsstring>(const glm::vec3 &amp;A1, const glm::vec3 &amp;B1, const glm::vec3 &amp;A2, const glm::vec3 &amp;B2, float radius1, float radius2)</argsstring>
        <name>CapsuleCapsuleCollision</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>A1</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>B1</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>A2</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>B2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius2</declname>
        </param>
        <briefdescription>
<para>Capsule Capsule collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A1</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of topmost sphere for first capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B1</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of bottommost sphere for first capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A2</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of topmost sphere for second capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B2</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of bottommost sphere for second capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius1</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of first capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius2</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of second capsule </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Capsule colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false Capsule colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="79" column="6" declfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1ac0847bd3390425b25ff591aa74f1f412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::CapsuleAABBCollision</definition>
        <argsstring>(const glm::vec3 &amp;A, const glm::vec3 &amp;B, const float radii, const glm::vec3 &amp;center, const float *halfExtents)</argsstring>
        <name>CapsuleAABBCollision</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>radii</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>halfExtents</declname>
        </param>
        <briefdescription>
<para>Capsule AABB collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the topmost sphere for capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the bottommost sphere for capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radii</parametername>
</parameternamelist>
<parameterdescription>
<para>Radii of the capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the AABB collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>halfExtents</parametername>
</parameternamelist>
<parameterdescription>
<para>Half extents of the AABB collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The capsule and AABB colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The capsule and AABB colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="92" column="6" declfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a5f6358f639b903628ca5addc5ff1a451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::AABBCollision</definition>
        <argsstring>(const glm::vec3 &amp;center, const float *halfExtents, const glm::vec3 &amp;center1, const float *halfExtents1)</argsstring>
        <name>AABBCollision</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>halfExtents</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>halfExtents1</declname>
        </param>
        <briefdescription>
<para>AABB AABB collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the first AABB collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>halfExtents</parametername>
</parameternamelist>
<parameterdescription>
<para>Half extents of the first AABB collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center1</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the second AABB collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>halfExtents1</parametername>
</parameternamelist>
<parameterdescription>
<para>Half extents of the second AABB collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The AABB colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The AABB colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="104" column="6" declfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a3a98a1e19066de38a68db34e6c183a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename Iterator1</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator1&gt;::value_type&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::ConvexShapeCollision</definition>
        <argsstring>(const Iterator &amp;startVertices1, const Iterator &amp;endVertices1, const Iterator1 &amp;startVertices2, const Iterator1 &amp;endVertices2)</argsstring>
        <name>ConvexShapeCollision</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>startVertices1</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>endVertices1</declname>
        </param>
        <param>
          <type>const Iterator1 &amp;</type>
          <declname>startVertices2</declname>
        </param>
        <param>
          <type>const Iterator1 &amp;</type>
          <declname>endVertices2</declname>
        </param>
        <briefdescription>
<para>Convex Shape collision detection algorithm. Uses GJK collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmtrx_1_1_g_j_k_util" kindref="compound">mtrx::GJKUtil</ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Iterator1</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator1&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startVertices1</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertex list for first convex collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices1</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertex list for first convex collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startVertices2</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertex list for the second convex shape collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices2</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertex list for the second convex shape collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The convex shape colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The convex shape colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="123" column="6" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a8efc8de6ee21149f34b5e7cd77fe1a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::ConvexShapeCapsuleCollision</definition>
        <argsstring>(const Iterator &amp;startVertices, const Iterator &amp;endVertices, const int size, const glm::vec3 &amp;A, const glm::vec3 &amp;B, const float radii)</argsstring>
        <name>ConvexShapeCapsuleCollision</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>startVertices</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>endVertices</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>radii</declname>
        </param>
        <briefdescription>
<para>Convex Shape Capsule collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startVertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertex list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertex list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the topmost sphere in the capsule collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the bottommost sphere in the capsule collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radii</parametername>
</parameternamelist>
<parameterdescription>
<para>Radii of the capsule collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The convex shape and capsule colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The convex shape and capsule colliders collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="143" column="6" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" bodystart="143" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a871e293d9a5b8a3a07f5d98fa927743a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::CapsuleOOBBCollision</definition>
        <argsstring>(const glm::vec3 &amp;A, const glm::vec3 &amp;B, float radii, const Iterator &amp;startVertices, const Iterator &amp;endVertices, const int size)</argsstring>
        <name>CapsuleOOBBCollision</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radii</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>startVertices</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>endVertices</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Capsule OOBB Collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of topmost sphere of capsule collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of bottommost sphere of capsule collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radii</parametername>
</parameternamelist>
<parameterdescription>
<para>Radii of the capsule collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startVertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertices list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertices list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The capsule and OOBB colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The capsule and OOBB colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="172" column="6" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a63e108082c43adf2c015f65f7b75830f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename Iterator1</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator1&gt;::value_type&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::AABBOOBBCollision</definition>
        <argsstring>(const Iterator &amp;startVertices1, const Iterator &amp;endVertices1, const Iterator1 &amp;startVertices2, const Iterator1 &amp;endVertices2)</argsstring>
        <name>AABBOOBBCollision</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>startVertices1</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>endVertices1</declname>
        </param>
        <param>
          <type>const Iterator1 &amp;</type>
          <declname>startVertices2</declname>
        </param>
        <param>
          <type>const Iterator1 &amp;</type>
          <declname>endVertices2</declname>
        </param>
        <briefdescription>
<para>AABB and OOBB collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespacemtrx_1_1_collision_util_1a3a98a1e19066de38a68db34e6c183a7c" kindref="member">mtrx::CollisionUtil::ConvexShapeCollision</ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Iterator1</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator1&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startVertices1</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertex list of the AABB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices1</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertex list of the AABB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startVertices2</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertex list of the OOBB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices2</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertex list of the OOBB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The AABB and OOBB colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The AABB and OOBB colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="193" column="6" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a389b40f189ad059f0366228ec61d5cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename Iterator1</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator1&gt;::value_type&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::OOBBCollision</definition>
        <argsstring>(const Iterator &amp;startVertices1, const Iterator &amp;endVertices1, const Iterator1 &amp;startVertices2, const Iterator1 &amp;endVertices2)</argsstring>
        <name>OOBBCollision</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>startVertices1</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>endVertices1</declname>
        </param>
        <param>
          <type>const Iterator1 &amp;</type>
          <declname>startVertices2</declname>
        </param>
        <param>
          <type>const Iterator1 &amp;</type>
          <declname>endVertices2</declname>
        </param>
        <briefdescription>
<para>OOBB and OOBB collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespacemtrx_1_1_collision_util_1a3a98a1e19066de38a68db34e6c183a7c" kindref="member">mtrx::CollisionUtil::ConvexShapeCollision</ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Iterator1</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator1&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startVertices1</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertex list of the first OOBB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices1</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertex list of the first OOBB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startVertices2</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertex list of the second OOBB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices2</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertex list of the second OOBB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The OOBB colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The OOBB colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="214" column="6" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacemtrx_1_1_collision_util_1a4244615348b7ba8a7733587cdd3a2ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;glm::vec3*, typename std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mtrx::CollisionUtil::ConvexShapeSphereCollision</definition>
        <argsstring>(const Iterator &amp;startVertices, const Iterator &amp;endVertices, const int size, const glm::vec3 &amp;center, const float radius)</argsstring>
        <name>ConvexShapeSphereCollision</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>startVertices</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>endVertices</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Convex Shape Sphere collision detection algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type for the data structure that holds the vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::enable_if_t&lt;std::is_same&lt;glm::vec3*</parametername>
<parametername>typename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::iterator_traits&lt;Iterator&gt;::value_type&gt;::value&gt; Template parameter check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startVertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the vertex list of the convex shape </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endVertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the vertex list of the convex shape </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices of convex shape collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the sphere collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true The convex shape and sphere colliders collide </para>
</simplesect>
<simplesect kind="return"><para>false The convex shape and sphere colliders do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="233" column="6" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" bodystart="233" bodyend="245"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace used to define some collision detection algorithms that are used to check for collision between different colliders. None of these functions require colliders themselves, They use mostly primitive classes instead. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/utils/CollisionUtil.h" line="15" column="1"/>
  </compounddef>
</doxygen>
