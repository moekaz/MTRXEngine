<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classmtrx_1_1_sphere_collider" kind="class" language="C++" prot="public">
    <compoundname>mtrx::SphereCollider</compoundname>
    <basecompoundref refid="classmtrx_1_1_collider" prot="public" virt="non-virtual">mtrx::Collider</basecompoundref>
    <basecompoundref refid="classmtrx_1_1_i_bounding_volume" prot="public" virt="non-virtual">mtrx::IBoundingVolume</basecompoundref>
    <includes refid="_sphere_collider_8h" local="no">SphereCollider.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmtrx_1_1_sphere_collider_1acfd2efbf284311c23d79e3e765197691" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float mtrx::SphereCollider::radius</definition>
        <argsstring></argsstring>
        <name>radius</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="106" column="7" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1abc022d7d5ff0186f00ef4974b00e793d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mtrx::SphereCollider::SphereCollider</definition>
        <argsstring>(const glm::vec3 &amp;center=glm::vec3(), const glm::quat &amp;orientation=glm::angleAxis(0.f, worldUp), const glm::vec3 &amp;scale=glm::vec3(1, 1, 1), float radius=0.5)</argsstring>
        <name>SphereCollider</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>center</declname>
          <defval>glm::vec3()</defval>
        </param>
        <param>
          <type>const glm::quat &amp;</type>
          <declname>orientation</declname>
          <defval>glm::angleAxis(0.f, worldUp)</defval>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>scale</declname>
          <defval>glm::vec3(1, 1, 1)</defval>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
<para>Construct a new Sphere <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center position of the sphere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>The orientation of the sphere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scale of the sphere (influences the radius of the collider) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The default radius of the sphere </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1aa557e71fcb3ab1c2ce742f95a08f26ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mtrx::SphereCollider::SphereCollider</definition>
        <argsstring>(const Transform &amp;transform=Transform(), float radius=0.5)</argsstring>
        <name>SphereCollider</name>
        <param>
          <type>const <ref refid="classmtrx_1_1_transform" kindref="compound">Transform</ref> &amp;</type>
          <declname>transform</declname>
          <defval><ref refid="classmtrx_1_1_transform" kindref="compound">Transform</ref>()</defval>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
<para>Construct a new Sphere <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>The transform of the sphere (position, orientation, scale) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_transform" kindref="compound">mtrx::Transform</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the default radius of the sphere </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1a743fd3eb6a3a62c8603c741a6a97c9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mtrx::SphereCollider::SphereCollider</definition>
        <argsstring>(const SphereCollider &amp;collider1, const SphereCollider &amp;collider2)</argsstring>
        <name>SphereCollider</name>
        <param>
          <type>const <ref refid="classmtrx_1_1_sphere_collider" kindref="compound">SphereCollider</ref> &amp;</type>
          <declname>collider1</declname>
        </param>
        <param>
          <type>const <ref refid="classmtrx_1_1_sphere_collider" kindref="compound">SphereCollider</ref> &amp;</type>
          <declname>collider2</declname>
        </param>
        <briefdescription>
<para>Construct a new Sphere <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object that encompass 2 sphere colliders (used within the context of BVH construction mainly) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>collider1</parametername>
</parameternamelist>
<parameterdescription>
<para>First sphere collider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>collider2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second sphere collider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1ab7aa2376558cd6cb30e2ec452dd34578" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual mtrx::SphereCollider::~SphereCollider</definition>
        <argsstring>()=default</argsstring>
        <name>~SphereCollider</name>
        <briefdescription>
<para>Destroy the Sphere <ref refid="classmtrx_1_1_collider" kindref="compound">Collider</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="48" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1adf3567008a057fe1332d922b7f82c29e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool mtrx::SphereCollider::RaycastCollision</definition>
        <argsstring>(const Ray &amp;ray) override</argsstring>
        <name>RaycastCollision</name>
        <reimplements refid="classmtrx_1_1_collider_1a361c341b949adf2508c46389f8b4509d">RaycastCollision</reimplements>
        <param>
          <type>const <ref refid="classmtrx_1_1_ray" kindref="compound">Ray</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <briefdescription>
<para>Raycast collision check for sphere colliders. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>The ray that we are check for collision on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmtrx_1_1_ray" kindref="compound">mtrx::Ray</ref> </para>
</simplesect>
<simplesect kind="return"><para>true The ray and the sphere collide </para>
</simplesect>
<simplesect kind="return"><para>false The ray and the sphere do not collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="57" column="21" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1a5d28c296930c245dc4c28a132fe7d494" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>float</type>
        <definition>virtual float mtrx::SphereCollider::GetSize</definition>
        <argsstring>() override</argsstring>
        <name>GetSize</name>
        <reimplements refid="classmtrx_1_1_i_bounding_volume_1a5b206a8c077a67afa20e5ca9249228d6">GetSize</reimplements>
        <briefdescription>
<para>Get the Size of the sphere (4/3 * PI * radius^3) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="64" column="22" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1abd5794eb14eb42d024c40ba2897692e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>float</type>
        <definition>virtual float mtrx::SphereCollider::GetGrowth</definition>
        <argsstring>(const SphereCollider &amp;sphereCollider)</argsstring>
        <name>GetGrowth</name>
        <param>
          <type>const <ref refid="classmtrx_1_1_sphere_collider" kindref="compound">SphereCollider</ref> &amp;</type>
          <declname>sphereCollider</declname>
        </param>
        <briefdescription>
<para>Get the Growth when creating a sphere collider between this collider and another sphere collider (for BVH construction) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sphereCollider</parametername>
</parameternamelist>
<parameterdescription>
<para>the sphere collider that we want to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The growth value of the resulting sphere collider </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="73" column="22" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1a5b754ba68a455a0fba788d9e17fff3b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float mtrx::SphereCollider::GetRadius</definition>
        <argsstring>() const</argsstring>
        <name>GetRadius</name>
        <briefdescription>
<para>Get the Radius of the collider. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float Radius of collider </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="80" column="14" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1aef2bf511296aa0b5c7c9e460596c1168" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mtrx::SphereCollider::SetRadius</definition>
        <argsstring>(float radius)</argsstring>
        <name>SetRadius</name>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Set the Radius of the collider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The value we want to set the radius to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="87" column="13" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classmtrx_1_1_sphere_collider_1ad238eaded51ef815efaf350a632d4ed0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void mtrx::SphereCollider::SetScale</definition>
        <argsstring>(const glm::vec3 &amp;scale) override</argsstring>
        <name>SetScale</name>
        <reimplements refid="classmtrx_1_1_collider_1a81b9373f9d09221753255046b9279a5d">SetScale</reimplements>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Set the Scale of the sphere collider. Only the X coordinate of the scale affects the collider, other coordinates are ignored. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the scale that we want to set the collider to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="99" column="21" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" bodystart="99" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implmentation of a Sphere collider used in collision systems. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>mtrx::IBoundingVolume</label>
        <link refid="classmtrx_1_1_i_bounding_volume"/>
      </node>
      <node id="1">
        <label>mtrx::SphereCollider</label>
        <link refid="classmtrx_1_1_sphere_collider"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>mtrx::Collider</label>
        <link refid="classmtrx_1_1_collider"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>mtrx::Transform</label>
        <link refid="classmtrx_1_1_transform"/>
      </node>
      <node id="4">
        <label>mtrx::IBoundingVolume</label>
        <link refid="classmtrx_1_1_i_bounding_volume"/>
      </node>
      <node id="1">
        <label>mtrx::SphereCollider</label>
        <link refid="classmtrx_1_1_sphere_collider"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>mtrx::Collider</label>
        <link refid="classmtrx_1_1_collider"/>
        <childnode refid="3" relation="usage">
          <edgelabel>transform</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" line="15" column="1" bodyfile="C:/Users/mohamed/Desktop/MTRXEngine/MTRXEngine/MTRXEngine/source/headers/colliders/SphereCollider.h" bodystart="14" bodyend="107"/>
    <listofallmembers>
      <member refid="classmtrx_1_1_collider_1af8b907eaf8cb13316dce419f595371df" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>CheckCollision</name></member>
      <member refid="classmtrx_1_1_collider_1a897ee0f8baa05f825be5f96a2abc3bd1" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>Collider</name></member>
      <member refid="classmtrx_1_1_collider_1a1af6daddbfaa7ba34f33845de3b05457" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>Collider</name></member>
      <member refid="classmtrx_1_1_collider_1a8abb09a0eee536698d5a7b5d270ed584" prot="protected" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>colliderId</name></member>
      <member refid="classmtrx_1_1_collider_1ac43e5d476507344a3340bae5451ad616" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetColliderId</name></member>
      <member refid="classmtrx_1_1_collider_1aa0eb9dee1d98fd45df1ef8cbfa0e43be" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetColliderType</name></member>
      <member refid="classmtrx_1_1_collider_1afccd3a798fc870d4acbb3c7a3f783c05" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetForward</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1abd5794eb14eb42d024c40ba2897692e2" prot="public" virt="virtual"><scope>mtrx::SphereCollider</scope><name>GetGrowth</name></member>
      <member refid="classmtrx_1_1_collider_1ad22caa3bdd6a81cc511a0f9141d8e5ee" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetOrientation</name></member>
      <member refid="classmtrx_1_1_collider_1a6dca0e6b7f19c5582a312af54c34d8e1" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetPosition</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1a5b754ba68a455a0fba788d9e17fff3b7" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetRadius</name></member>
      <member refid="classmtrx_1_1_collider_1a0e7750440d8bf791c85b87d2e6a6f33a" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetScale</name></member>
      <member refid="classmtrx_1_1_collider_1a59a39aa74953a4a6d228fec5bf3028e8" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetSide</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1a5d28c296930c245dc4c28a132fe7d494" prot="public" virt="virtual"><scope>mtrx::SphereCollider</scope><name>GetSize</name></member>
      <member refid="classmtrx_1_1_collider_1ac946675c7e0ae86dc77459742511b9ae" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>GetUp</name></member>
      <member refid="classmtrx_1_1_collider_1a3c8cc45f3a2b276157ea474620f5dcb7" prot="private" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>id</name></member>
      <member refid="classmtrx_1_1_collider_1a056bd024840f5c426fdb9157fd81cf37" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>IsConvex</name></member>
      <member refid="classmtrx_1_1_collider_1ad0f9075538c6a8c50ab2137f9172a201" prot="protected" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>isConvexShape</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1acfd2efbf284311c23d79e3e765197691" prot="private" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>radius</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1adf3567008a057fe1332d922b7f82c29e" prot="public" virt="virtual"><scope>mtrx::SphereCollider</scope><name>RaycastCollision</name></member>
      <member refid="classmtrx_1_1_collider_1ac69efe7d26d9e600154f601cbcc30849" prot="public" virt="virtual"><scope>mtrx::SphereCollider</scope><name>SetOrientation</name></member>
      <member refid="classmtrx_1_1_collider_1a0bbed70b7af99a1469b3da9eac7df531" prot="public" virt="virtual"><scope>mtrx::SphereCollider</scope><name>SetPosition</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1aef2bf511296aa0b5c7c9e460596c1168" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>SetRadius</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1ad238eaded51ef815efaf350a632d4ed0" prot="public" virt="virtual"><scope>mtrx::SphereCollider</scope><name>SetScale</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1abc022d7d5ff0186f00ef4974b00e793d" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>SphereCollider</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1aa557e71fcb3ab1c2ce742f95a08f26ed" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>SphereCollider</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1a743fd3eb6a3a62c8603c741a6a97c9ff" prot="public" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>SphereCollider</name></member>
      <member refid="classmtrx_1_1_collider_1a812b71180496a530dc1a3a1750e4efb1" prot="protected" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>transform</name></member>
      <member refid="classmtrx_1_1_collider_1adf1662048ee02d5d96d430a8a3875433" prot="protected" virt="non-virtual"><scope>mtrx::SphereCollider</scope><name>type</name></member>
      <member refid="classmtrx_1_1_collider_1a3d27ae263e0cc1f15b14ec09a715ab7d" prot="public" virt="virtual"><scope>mtrx::SphereCollider</scope><name>~Collider</name></member>
      <member refid="classmtrx_1_1_sphere_collider_1ab7aa2376558cd6cb30e2ec452dd34578" prot="public" virt="virtual"><scope>mtrx::SphereCollider</scope><name>~SphereCollider</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
