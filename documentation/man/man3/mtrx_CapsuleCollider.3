.TH "mtrx::CapsuleCollider" 3 "Sat Dec 7 2019" "MTRX Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mtrx::CapsuleCollider \- Implementation of Capsule colliders\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CapsuleCollider\&.h>\fP
.PP
Inherits \fBmtrx::Collider\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCapsuleCollider\fP (const glm::vec3 &center=glm::vec3(), const glm::quat &orientation=glm::angleAxis(0\&.f, worldUp), const glm::vec3 &scale=glm::vec3(1, 1, 1), float radii=0\&.5f, float height=1\&.f)"
.br
.RI "Construct a new Capsule \fBCollider\fP object\&. "
.ti -1c
.RI "\fBCapsuleCollider\fP (const \fBTransform\fP &transform=\fBTransform\fP(), float radii=0\&.5f, float height=1\&.f)"
.br
.RI "Construct a new Capsule \fBCollider\fP object\&. "
.ti -1c
.RI "virtual \fB~CapsuleCollider\fP ()=default"
.br
.RI "Destroy the Capsule \fBCollider\fP object\&. "
.ti -1c
.RI "virtual bool \fBRaycastCollision\fP (const \fBRay\fP &ray) override"
.br
.RI "Raycast ray and capsule collider collision detection algorithm\&. "
.ti -1c
.RI "float \fBGetRadii\fP () const"
.br
.RI "Get the Radii of the capsule colldier\&. "
.ti -1c
.RI "float \fBGetHeight\fP () const"
.br
.RI "Get the Height of the capsule collider\&. "
.ti -1c
.RI "void \fBSetRadii\fP (float radius)"
.br
.RI "Set the Radii of the capsule collider\&. "
.ti -1c
.RI "void \fBSetHeight\fP (float height)"
.br
.RI "Set the Height of the capsule collider\&. "
.ti -1c
.RI "virtual void \fBSetScale\fP (const glm::vec3 &scale) override"
.br
.RI "Set the Scale of the capsule collider Only the X and Y values of the scale are the only applicable values on the collider The Z value is ignored\&. "
.ti -1c
.RI "virtual void \fBSetPosition\fP (const glm::vec3 &position) override"
.br
.RI "Set the Position of the capsile collider\&. "
.ti -1c
.RI "virtual void \fBSetOrientation\fP (const glm::quat &orientation) override"
.br
.RI "Set the Orientation of the capsule collider\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "glm::vec3 \fBA\fP"
.br
.ti -1c
.RI "glm::vec3 \fBB\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "float \fBradii\fP"
.br
.ti -1c
.RI "float \fBheight\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Implementation of Capsule colliders\&. 


.SH "Constructor & Destructor Documentation"
.PP 
.SS "mtrx::CapsuleCollider::CapsuleCollider (const glm::vec3 & center = \fCglm::vec3()\fP, const glm::quat & orientation = \fCglm::angleAxis(0\&.f, worldUp)\fP, const glm::vec3 & scale = \fCglm::vec3(1, 1, 1)\fP, float radii = \fC0\&.5f\fP, float height = \fC1\&.f\fP)"

.PP
Construct a new Capsule \fBCollider\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIcenter\fP Center of the capsule collider 
.br
\fIorientation\fP Orientation of the capsule collider 
.br
\fIscale\fP Scale of the capsule collider 
.br
\fIradii\fP Radii of the spheres of the capsule collider 
.br
\fIheight\fP Height of the capsule collider 
.RE
.PP

.SS "mtrx::CapsuleCollider::CapsuleCollider (const \fBTransform\fP & transform = \fC\fBTransform\fP()\fP, float radii = \fC0\&.5f\fP, float height = \fC1\&.f\fP)"

.PP
Construct a new Capsule \fBCollider\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fItransform\fP The transform that the capsule collider will use 
.RE
.PP
\fBSee also\fP
.RS 4
\fBmtrx::Transform\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIradii\fP Radii of the spheres of the capsule collider 
.br
\fIheight\fP Height of the capsule collider 
.RE
.PP

.SS "virtual mtrx::CapsuleCollider::~CapsuleCollider ()\fC [virtual]\fP, \fC [default]\fP"

.PP
Destroy the Capsule \fBCollider\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "float mtrx::CapsuleCollider::GetHeight () const\fC [inline]\fP"

.PP
Get the Height of the capsule collider\&. 
.PP
\fBReturns\fP
.RS 4
float The height of the capsule collider 
.RE
.PP

.SS "float mtrx::CapsuleCollider::GetRadii () const\fC [inline]\fP"

.PP
Get the Radii of the capsule colldier\&. 
.PP
\fBReturns\fP
.RS 4
float The radii of the capsule collider 
.RE
.PP

.SS "virtual bool mtrx::CapsuleCollider::RaycastCollision (const \fBRay\fP & ray)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Raycast ray and capsule collider collision detection algorithm\&. 
.PP
\fBParameters\fP
.RS 4
\fIray\fP \fBRay\fP used for raycast check 
.RE
.PP
\fBSee also\fP
.RS 4
\fBmtrx::Ray\fP 
.RE
.PP
\fBReturns\fP
.RS 4
true The ray and capsule collider collide 
.PP
false the ray and the capsule collider do not collide 
.RE
.PP

.PP
Implements \fBmtrx::Collider\fP\&.
.SS "void mtrx::CapsuleCollider::SetHeight (float height)\fC [inline]\fP"

.PP
Set the Height of the capsule collider\&. 
.PP
\fBParameters\fP
.RS 4
\fIheight\fP The new value of the height 
.RE
.PP

.SS "virtual void mtrx::CapsuleCollider::SetOrientation (const glm::quat & orientation)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Set the Orientation of the capsule collider\&. 
.PP
\fBParameters\fP
.RS 4
\fIorientation\fP The new orientation of the capsule collider 
.RE
.PP

.PP
Reimplemented from \fBmtrx::Collider\fP\&.
.SS "virtual void mtrx::CapsuleCollider::SetPosition (const glm::vec3 & position)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Set the Position of the capsile collider\&. 
.PP
\fBParameters\fP
.RS 4
\fIposition\fP The new position of the capsule collider 
.RE
.PP

.PP
Reimplemented from \fBmtrx::Collider\fP\&.
.SS "void mtrx::CapsuleCollider::SetRadii (float radius)\fC [inline]\fP"

.PP
Set the Radii of the capsule collider\&. 
.PP
\fBParameters\fP
.RS 4
\fIradius\fP The new value of radius 
.RE
.PP

.SS "virtual void mtrx::CapsuleCollider::SetScale (const glm::vec3 & scale)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Set the Scale of the capsule collider Only the X and Y values of the scale are the only applicable values on the collider The Z value is ignored\&. 
.PP
\fBParameters\fP
.RS 4
\fIscale\fP The new scale of the collider 
.RE
.PP

.PP
Reimplemented from \fBmtrx::Collider\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MTRX Engine from the source code\&.
