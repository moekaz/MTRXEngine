.TH "mtrx::Body" 3 "Sat Dec 7 2019" "MTRX Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mtrx::Body \- Implementation of a basic particle body\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Body\&.h>\fP
.PP
Inherits \fBmtrx::IIntegratable\fP\&.
.PP
Inherited by mtrx::Particle, and \fBmtrx::Rigidbody\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBody\fP (const glm::vec3 &position=glm::vec3(), const glm::quat &orientation=glm::quat(), const glm::vec3 &scale=glm::vec3(), const float mass=MAX_MASS)"
.br
.RI "Construct a new \fBBody\fP object\&. "
.ti -1c
.RI "virtual \fB~Body\fP ()=default"
.br
.RI "Destroy the \fBBody\fP object\&. "
.ti -1c
.RI "void \fBAddForce\fP (const glm::vec3 &force)"
.br
.RI "Adding a force vector at the center of gravity of the body\&. "
.ti -1c
.RI "virtual void \fBIntegrate\fP (float deltaTime)=0"
.br
.RI "Integrating the forces applied to the body\&. "
.ti -1c
.RI "virtual void \fBClearAccumulators\fP ()=0"
.br
.RI "Clearing the accumulators of the body\&. "
.ti -1c
.RI "void \fBSetInverseMass\fP (const float inverseMass)"
.br
.RI "Set the Inverse Mass of the body\&. "
.ti -1c
.RI "void \fBSetPosition\fP (const glm::vec3 &position)"
.br
.RI "Set the Position of the body\&. "
.ti -1c
.RI "void \fBSetVelocity\fP (const glm::vec3 &velocity)"
.br
.RI "Set the Velocity of the body\&. "
.ti -1c
.RI "void \fBSetAcceleration\fP (const glm::vec3 &acceleration)"
.br
.RI "Set the Acceleration of the body\&. "
.ti -1c
.RI "void \fBSetLinearDamping\fP (const float damping)"
.br
.RI "Set the Linear Damping of the body\&. "
.ti -1c
.RI "void \fBSetMass\fP (const float mass)"
.br
.RI "Set the mass of the body\&. "
.ti -1c
.RI "glm::quat & \fBGetOrientation\fP ()"
.br
.RI "Get the Orientation of the body\&. "
.ti -1c
.RI "bool \fBGetIsInfiniteMass\fP ()"
.br
.RI "Checking whether we this body is of infinite mass by checking that the inverse mass is 0\&. "
.ti -1c
.RI "float \fBGetInverseMass\fP () const"
.br
.RI "Get the Inverse Mass of the body\&. "
.ti -1c
.RI "float \fBGetDamping\fP () const"
.br
.RI "Get the linear damping of the body\&. "
.ti -1c
.RI "glm::vec3 & \fBGetPosition\fP ()"
.br
.RI "Get the Position of the body\&. "
.ti -1c
.RI "glm::vec3 & \fBGetVelocity\fP ()"
.br
.RI "Get the Velocity of the body\&. "
.ti -1c
.RI "glm::vec3 & \fBGetAcceleration\fP ()"
.br
.RI "Get the Acceleration of the body\&. "
.ti -1c
.RI "glm::vec3 & \fBGetAccumForces\fP ()"
.br
.RI "Get the accumulated forces applied on the body\&. "
.ti -1c
.RI "\fBTransform\fP & \fBGetTransform\fP ()"
.br
.RI "Get the \fBTransform\fP of the body\&. "
.ti -1c
.RI "float \fBGetMass\fP () const"
.br
.RI "Get the Mass of the body\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBTransform\fP \fBtransform\fP"
.br
.ti -1c
.RI "glm::vec3 \fBvelocity\fP"
.br
.ti -1c
.RI "glm::vec3 \fBacceleration\fP"
.br
.ti -1c
.RI "glm::vec3 \fBaccumForces\fP"
.br
.ti -1c
.RI "float \fBlinearDamping\fP"
.br
.ti -1c
.RI "float \fBinverseMass\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Implementation of a basic particle body\&. 


.SH "Constructor & Destructor Documentation"
.PP 
.SS "mtrx::Body::Body (const glm::vec3 & position = \fCglm::vec3()\fP, const glm::quat & orientation = \fCglm::quat()\fP, const glm::vec3 & scale = \fCglm::vec3()\fP, const float mass = \fCMAX_MASS\fP)"

.PP
Construct a new \fBBody\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIposition\fP The position of the body 
.br
\fIorientation\fP Orientation of the body 
.br
\fIscale\fP Scale of the body 
.br
\fImass\fP Mass of the body 
.RE
.PP

.SS "virtual mtrx::Body::~Body ()\fC [virtual]\fP, \fC [default]\fP"

.PP
Destroy the \fBBody\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "void mtrx::Body::AddForce (const glm::vec3 & force)\fC [inline]\fP"

.PP
Adding a force vector at the center of gravity of the body\&. 
.PP
\fBParameters\fP
.RS 4
\fIforce\fP The force vector that we will be added to the body's force accumulator 
.RE
.PP

.SS "virtual void mtrx::Body::ClearAccumulators ()\fC [pure virtual]\fP"

.PP
Clearing the accumulators of the body\&. 
.PP
Implemented in \fBmtrx::Rigidbody\fP\&.
.SS "glm::vec3& mtrx::Body::GetAcceleration ()\fC [inline]\fP"

.PP
Get the Acceleration of the body\&. 
.PP
\fBReturns\fP
.RS 4
glm::vec3& The value of the acceleration 
.RE
.PP

.SS "glm::vec3& mtrx::Body::GetAccumForces ()\fC [inline]\fP"

.PP
Get the accumulated forces applied on the body\&. 
.PP
\fBReturns\fP
.RS 4
glm::vec3& The value of the accumulated forces 
.RE
.PP

.SS "float mtrx::Body::GetDamping () const\fC [inline]\fP"

.PP
Get the linear damping of the body\&. 
.PP
\fBReturns\fP
.RS 4
float The value of the linear damping 
.RE
.PP

.SS "float mtrx::Body::GetInverseMass () const\fC [inline]\fP"

.PP
Get the Inverse Mass of the body\&. 
.PP
\fBReturns\fP
.RS 4
float The value of the inverse mass of the body 
.RE
.PP

.SS "bool mtrx::Body::GetIsInfiniteMass ()\fC [inline]\fP"

.PP
Checking whether we this body is of infinite mass by checking that the inverse mass is 0\&. 
.PP
\fBReturns\fP
.RS 4
true The body is of infinite mass 
.PP
false The body is not of infinite mass 
.RE
.PP

.SS "float mtrx::Body::GetMass () const"

.PP
Get the Mass of the body\&. 
.PP
\fBReturns\fP
.RS 4
float The mass of the body 
.RE
.PP

.SS "glm::quat& mtrx::Body::GetOrientation ()\fC [inline]\fP"

.PP
Get the Orientation of the body\&. 
.PP
\fBReturns\fP
.RS 4
glm::quat& The quaternion orientation value 
.RE
.PP

.SS "glm::vec3& mtrx::Body::GetPosition ()\fC [inline]\fP"

.PP
Get the Position of the body\&. 
.PP
\fBReturns\fP
.RS 4
glm::vec3& The position value of the body 
.RE
.PP

.SS "\fBTransform\fP& mtrx::Body::GetTransform ()\fC [inline]\fP"

.PP
Get the \fBTransform\fP of the body\&. 
.PP
\fBReturns\fP
.RS 4
\fBTransform\fP& The transform of the body 
.RE
.PP

.SS "glm::vec3& mtrx::Body::GetVelocity ()\fC [inline]\fP"

.PP
Get the Velocity of the body\&. 
.PP
\fBReturns\fP
.RS 4
glm::vec3& The value of the velocity 
.RE
.PP

.SS "virtual void mtrx::Body::Integrate (float deltaTime)\fC [pure virtual]\fP"

.PP
Integrating the forces applied to the body\&. 
.PP
\fBParameters\fP
.RS 4
\fIdeltaTime\fP The time elapsed between frames 
.RE
.PP

.PP
Implements \fBmtrx::IIntegratable\fP\&.
.PP
Implemented in \fBmtrx::Rigidbody\fP\&.
.SS "void mtrx::Body::SetAcceleration (const glm::vec3 & acceleration)\fC [inline]\fP"

.PP
Set the Acceleration of the body\&. 
.PP
\fBParameters\fP
.RS 4
\fIacceleration\fP The new acceleration value of the body 
.RE
.PP

.SS "void mtrx::Body::SetInverseMass (const float inverseMass)\fC [inline]\fP"

.PP
Set the Inverse Mass of the body\&. 
.PP
\fBParameters\fP
.RS 4
\fIinverseMass\fP The new value of the inverse mass 
.RE
.PP

.SS "void mtrx::Body::SetLinearDamping (const float damping)\fC [inline]\fP"

.PP
Set the Linear Damping of the body\&. 
.PP
\fBParameters\fP
.RS 4
\fIdamping\fP the new linear damping value 
.RE
.PP

.SS "void mtrx::Body::SetMass (const float mass)"

.PP
Set the mass of the body\&. 
.PP
\fBParameters\fP
.RS 4
\fImass\fP The new value of the mass 
.RE
.PP

.SS "void mtrx::Body::SetPosition (const glm::vec3 & position)\fC [inline]\fP"

.PP
Set the Position of the body\&. 
.PP
\fBParameters\fP
.RS 4
\fIposition\fP The new position of the body 
.RE
.PP

.SS "void mtrx::Body::SetVelocity (const glm::vec3 & velocity)\fC [inline]\fP"

.PP
Set the Velocity of the body\&. 
.PP
\fBParameters\fP
.RS 4
\fIvelocity\fP The new velocity value of the body 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for MTRX Engine from the source code\&.
