.TH "mtrx::PhysicsUtil" 3 "Sat Dec 7 2019" "MTRX Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mtrx::PhysicsUtil \- Utility namespace for some basic calculations that are useful for collision detection and other physics related functionality\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "glm::vec3 \fBTripleCross\fP (const glm::vec3 &a, const glm::vec3 &b, const glm::vec3 &c)"
.br
.RI "Implementation of triple cross product\&. "
.ti -1c
.RI "float \fBMinDistanceTwoLines\fP (const glm::vec3 &A, const glm::vec3 &B, const glm::vec3 &C, const glm::vec3 &D)"
.br
.RI "Minimum distance squared between 2 infinite line\&. The square of the minimum distance is used for optimization purposes\&. "
.ti -1c
.RI "float \fBMinDistanceSquaredTwoSegments\fP (const glm::vec3 &A, const glm::vec3 &B, const glm::vec3 &C, const glm::vec3 &D)"
.br
.RI "Minimum distance squared between 2 line segments\&. The square of the minimum distance is used for optimization purposes \fBhttp://geomalgorithms\&.com/a07-_distance\&.html#dist3D_Segment_to_Segment\&.\fP"
.ti -1c
.RI "std::pair< float, glm::vec3 > \fBMinDistanceSquaredPointRay\fP (const glm::vec3 &point, const glm::vec3 &startPointRay, const glm::vec3 &rayDirection)"
.br
.RI "Minimum distance squared of a point and ray\&. The square of the minimum distance is used for optimization purposes\&. "
.ti -1c
.RI "std::pair< float, glm::vec3 > \fBMinDistanceSquaredPointSegment\fP (const glm::vec3 &A, const glm::vec3 &B, const glm::vec3 &C)"
.br
.RI "Minimum distance squared of a point and a line segment\&. The square of the minimum distance is used for optimization purposes\&. "
.ti -1c
.RI "float \fBMinDistanceSquaredLineSegmentRay\fP (const glm::vec3 &a, const glm::vec3 &b, const glm::vec3 &rayStart, const glm::vec3 &rayDirection)"
.br
.RI "Minimum distance squared Line segment and ray\&. Can be broken down into a line segment minimum distance squared\&. "
.ti -1c
.RI "float \fBMinDistanceSquaredPointTriangle\fP (const glm::vec3 &pt, const glm::vec3 &a, const glm::vec3 &b, const glm::vec3 &c)"
.br
.RI "Minimum distance squared between a point and triangle\&. The square of the minimum distance is used for optimization purposes\&. "
.ti -1c
.RI "float \fBMinDistanceSquaredLineSegmentTriangle\fP (const glm::vec3 &a, const glm::vec3 &b, const glm::vec3 &c, const glm::vec3 &d, const glm::vec3 &e)"
.br
.RI "Minimum distance squared of line segment and triangle\&. The square of the minimum distance is used for optimization purposes\&. "
.ti -1c
.RI "std::pair< float, glm::vec3 > \fBMinDistanceSquaredPointAABB\fP (const glm::vec3 &pt, const glm::vec3 &center, const float *halfExtents)"
.br
.RI "Minimum distance squared between a point and an AABB\&. The square of the minimum distance is used for optimization purposes\&. "
.ti -1c
.RI "glm::quat \fBSlerp\fP (const glm::quat &firstRotation, const glm::quat &secondRotation, float t)"
.br
.RI "Implementation of Slerp which is a lerp for rotations\&. "
.ti -1c
.RI "glm::vec3 \fBLerp\fP (const glm::vec3 &startingPosition, const glm::vec3 &destination, float t)"
.br
.RI "Implementation of linear interpolation\&. "
.ti -1c
.RI "float \fBEase\fP (float t)"
.br
.RI "Easing function for the t parameter to be used for lerping functions\&. The easing function is a half sin curve that allows for a slow start and a slow end\&. "
.ti -1c
.RI "template<typename Iterator , typename  = std::enable_if_t<std::is_same<glm::vec3*, typename std::iterator_traits<Iterator>::value_type>::value>> std::vector< \fBTriangle\fP > \fBTriangulateConvexShape\fP (const Iterator &startVertices, const Iterator &endVertices, const int size)"
.br
.RI "Triangulating a convex shape by fan triangulation which is using the first vertex as a starting point for all triangules and fanning out to the other vertices\&. "
.in -1c
.SH "Detailed Description"
.PP 
Utility namespace for some basic calculations that are useful for collision detection and other physics related functionality\&. 


.SH "Function Documentation"
.PP 
.SS "float mtrx::PhysicsUtil::Ease (float t)"

.PP
Easing function for the t parameter to be used for lerping functions\&. The easing function is a half sin curve that allows for a slow start and a slow end\&. 
.PP
\fBParameters\fP
.RS 4
\fIt\fP Parameter between [0, 1] 
.RE
.PP
\fBReturns\fP
.RS 4
float New t value according to the easing function 
.RE
.PP

.SS "glm::vec3 mtrx::PhysicsUtil::Lerp (const glm::vec3 & startingPosition, const glm::vec3 & destination, float t)"

.PP
Implementation of linear interpolation\&. 
.PP
\fBParameters\fP
.RS 4
\fIstartingPosition\fP Start position 
.br
\fIdestination\fP End position 
.br
\fIt\fP Parameter between [0, 1] 
.RE
.PP
\fBReturns\fP
.RS 4
glm::vec3 A vector between the 2 vectors influenced by the t value 
.RE
.PP

.SS "float mtrx::PhysicsUtil::MinDistanceSquaredLineSegmentRay (const glm::vec3 & a, const glm::vec3 & b, const glm::vec3 & rayStart, const glm::vec3 & rayDirection)"

.PP
Minimum distance squared Line segment and ray\&. Can be broken down into a line segment minimum distance squared\&. 
.PP
\fBSee also\fP
.RS 4
mtrx::PhysicsUtil::MinimumDistanceSquaredTwoSegments The square of the minimum distance is used for optimization purposes
.RE
.PP
\fBParameters\fP
.RS 4
\fIa\fP The first end point of the line segment 
.br
\fIb\fP The second end point of the line segment 
.br
\fIrayStart\fP The starting point of the ray 
.br
\fIrayDirection\fP The normalized direction of the ray 
.RE
.PP
\fBReturns\fP
.RS 4
float The minimum distance squared of the line segment and the ray 
.RE
.PP

.SS "float mtrx::PhysicsUtil::MinDistanceSquaredLineSegmentTriangle (const glm::vec3 & a, const glm::vec3 & b, const glm::vec3 & c, const glm::vec3 & d, const glm::vec3 & e)"

.PP
Minimum distance squared of line segment and triangle\&. The square of the minimum distance is used for optimization purposes\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP The first end point of the line segment 
.br
\fIb\fP The second end point of the line segment 
.br
\fIc\fP First point of the triangle 
.br
\fId\fP Second point of the triangle 
.br
\fIe\fP Third point of the triangle 
.RE
.PP
\fBReturns\fP
.RS 4
float The minimum distance squared between the line segment and the triangle 
.RE
.PP

.SS "std::pair<float, glm::vec3> mtrx::PhysicsUtil::MinDistanceSquaredPointAABB (const glm::vec3 & pt, const glm::vec3 & center, const float * halfExtents)"

.PP
Minimum distance squared between a point and an AABB\&. The square of the minimum distance is used for optimization purposes\&. 
.PP
\fBParameters\fP
.RS 4
\fIpt\fP The point we want to check the distance for 
.br
\fIcenter\fP The center of the AABB collider 
.RE
.PP
\fBSee also\fP
.RS 4
\fBmtrx::AABBCollider\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIhalfExtents\fP The half extents of the \fBAABBCollider\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBmtrx::AABBCollider\fP 
.RE
.PP
\fBReturns\fP
.RS 4
std::pair<float, glm::vec3> The minimum distance squared and the closest point 
.RE
.PP

.SS "std::pair<float, glm::vec3> mtrx::PhysicsUtil::MinDistanceSquaredPointRay (const glm::vec3 & point, const glm::vec3 & startPointRay, const glm::vec3 & rayDirection)"

.PP
Minimum distance squared of a point and ray\&. The square of the minimum distance is used for optimization purposes\&. 
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP A point in 3d space we want to check the distance for 
.br
\fIstartPointRay\fP Start point of the ray 
.br
\fIrayDirection\fP The normalized direction of the ray 
.RE
.PP
\fBReturns\fP
.RS 4
std::pair<float, glm::vec3> The minimum distance squared and the closest point 
.RE
.PP

.SS "std::pair<float, glm::vec3> mtrx::PhysicsUtil::MinDistanceSquaredPointSegment (const glm::vec3 & A, const glm::vec3 & B, const glm::vec3 & C)"

.PP
Minimum distance squared of a point and a line segment\&. The square of the minimum distance is used for optimization purposes\&. 
.PP
\fBParameters\fP
.RS 4
\fIA\fP The point we want to check the distance for 
.br
\fIB\fP The first end point of the line segment 
.br
\fIC\fP The second end point of the line segment 
.RE
.PP
\fBReturns\fP
.RS 4
std::pair<float, glm::vec3> The minimum distance squared and the closest point 
.RE
.PP

.SS "float mtrx::PhysicsUtil::MinDistanceSquaredPointTriangle (const glm::vec3 & pt, const glm::vec3 & a, const glm::vec3 & b, const glm::vec3 & c)"

.PP
Minimum distance squared between a point and triangle\&. The square of the minimum distance is used for optimization purposes\&. 
.PP
\fBParameters\fP
.RS 4
\fIpt\fP The point we want to check the distance for 
.br
\fIa\fP The first point of the triangle 
.br
\fIb\fP The second point of the triangle 
.br
\fIc\fP The third point of the triangle 
.RE
.PP
\fBReturns\fP
.RS 4
float The minimum distance squared 
.RE
.PP

.SS "float mtrx::PhysicsUtil::MinDistanceSquaredTwoSegments (const glm::vec3 & A, const glm::vec3 & B, const glm::vec3 & C, const glm::vec3 & D)"

.PP
Minimum distance squared between 2 line segments\&. The square of the minimum distance is used for optimization purposes \fBhttp://geomalgorithms\&.com/a07-_distance\&.html#dist3D_Segment_to_Segment\&.\fP
.PP
\fBParameters\fP
.RS 4
\fIA\fP First end of the line segment 
.br
\fIB\fP Second end of the line segment 
.br
\fIC\fP First end of the second line segment 
.br
\fID\fP Second end of the second line segment 
.RE
.PP
\fBReturns\fP
.RS 4
float The minimum distance squared between 2 line segments 
.RE
.PP

.SS "float mtrx::PhysicsUtil::MinDistanceTwoLines (const glm::vec3 & A, const glm::vec3 & B, const glm::vec3 & C, const glm::vec3 & D)"

.PP
Minimum distance squared between 2 infinite line\&. The square of the minimum distance is used for optimization purposes\&. 
.PP
\fBParameters\fP
.RS 4
\fIA\fP Point on first line 
.br
\fIB\fP Point on first line 
.br
\fIC\fP Point on second line 
.br
\fID\fP Point on second line 
.RE
.PP
\fBReturns\fP
.RS 4
float The minimum distance squared between the 2 infinite lines 
.RE
.PP

.SS "glm::quat mtrx::PhysicsUtil::Slerp (const glm::quat & firstRotation, const glm::quat & secondRotation, float t)"

.PP
Implementation of Slerp which is a lerp for rotations\&. 
.PP
\fBParameters\fP
.RS 4
\fIfirstRotation\fP start position of the rotation 
.br
\fIsecondRotation\fP End position of the rotation 
.br
\fIt\fP parameter between [0, 1] to interpolate between the 2 rotations 
.RE
.PP
\fBReturns\fP
.RS 4
glm::quat The rotation interpolated between the 2 rotations 
.RE
.PP

.SS "template<typename Iterator , typename  = std::enable_if_t<std::is_same<glm::vec3*, typename std::iterator_traits<Iterator>::value_type>::value>> std::vector<\fBTriangle\fP> mtrx::PhysicsUtil::TriangulateConvexShape (const Iterator & startVertices, const Iterator & endVertices, const int size)"

.PP
Triangulating a convex shape by fan triangulation which is using the first vertex as a starting point for all triangules and fanning out to the other vertices\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIIterator\fP Iterator type that is used by the collection of vertices 
.br
\fIstd::enable_if_t<std::is_same<glm::vec3*,typename\fP std::iterator_traits<Iterator>::value_type>::value> Iterator template check 
.RE
.PP
\fBParameters\fP
.RS 4
\fIstartVertices\fP Iterator to the beginning of the vertex list 
.br
\fIendVertices\fP Iterator to the end of the vertex list 
.br
\fIsize\fP The size of the vertex list 
.RE
.PP
\fBReturns\fP
.RS 4
std::vector<Triangle> A vector of triangles representing the triangulated mesh 
.RE
.PP

.SS "glm::vec3 mtrx::PhysicsUtil::TripleCross (const glm::vec3 & a, const glm::vec3 & b, const glm::vec3 & c)"

.PP
Implementation of triple cross product\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP First vector 
.br
\fIb\fP Second vector 
.br
\fIc\fP Third vector 
.RE
.PP
\fBReturns\fP
.RS 4
glm::vec3 The result of the triple cross product 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for MTRX Engine from the source code\&.
