.TH "mtrx::AABBCollider" 3 "Sat Dec 7 2019" "MTRX Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mtrx::AABBCollider \- Implmentation of an Axis Aligned Bounding Box used for collision systems\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AABBCollider\&.h>\fP
.PP
Inherits \fBmtrx::ConvexShapeCollider\fP, and \fBmtrx::IBoundingVolume\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAABBCollider\fP (const glm::vec3 &center=glm::vec3(), const glm::vec3 &scale=glm::vec3(1, 1, 1))"
.br
.RI "Construct a new \fBAABBCollider\fP object\&. "
.ti -1c
.RI "virtual \fB~AABBCollider\fP ()=default"
.br
.RI "Destroy the \fBAABBCollider\fP object\&. "
.ti -1c
.RI "virtual bool \fBRaycastCollision\fP (const \fBRay\fP &ray) override"
.br
.RI "Collision function between a ray and an AABB\&. "
.ti -1c
.RI "virtual void \fBSetOrientation\fP (const glm::quat &orientation) override"
.br
.RI "This function should not be used and is empty as AABBs should not change orientations\&. "
.ti -1c
.RI "virtual float \fBGetSize\fP () override"
.br
.RI "Calculate the size of an AABB defined as length * width * height\&. "
.ti -1c
.RI "const glm::vec3 * \fBGetAxes\fP () const"
.br
.RI "Get the Axes that define the AABB's world They would constant in this case since the orientation never changes\&. "
.ti -1c
.RI "const float * \fBGetHalfExtents\fP () const"
.br
.RI "Get the Half Extents of the AABB (This is the const version) "
.ti -1c
.RI "float * \fBGetHalfExtents\fP ()"
.br
.ti -1c
.RI "virtual void \fBSetScale\fP (const glm::vec3 &scale) override"
.br
.RI "Set the Scale object overriden to modify the halfExtents to represent scale change\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "float \fBhalfExtents\fP [3]"
.br
.ti -1c
.RI "\fBObjectAxes\fP \fBaxes\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Implmentation of an Axis Aligned Bounding Box used for collision systems\&. 


.SH "Constructor & Destructor Documentation"
.PP 
.SS "mtrx::AABBCollider::AABBCollider (const glm::vec3 & center = \fCglm::vec3()\fP, const glm::vec3 & scale = \fCglm::vec3(1, 1, 1)\fP)"

.PP
Construct a new \fBAABBCollider\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIcenter\fP Center point of the AABB 
.br
\fIscale\fP Scale vector of the AABB 
.RE
.PP
\fBSee also\fP
.RS 4
\fBmtrx::Transform\fP 
.RE
.PP

.SS "virtual mtrx::AABBCollider::~AABBCollider ()\fC [virtual]\fP, \fC [default]\fP"

.PP
Destroy the \fBAABBCollider\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "const glm::vec3* mtrx::AABBCollider::GetAxes () const\fC [inline]\fP"

.PP
Get the Axes that define the AABB's world They would constant in this case since the orientation never changes\&. 
.PP
\fBReturns\fP
.RS 4
const glm::vec3* pointer to the array of 3 axes 
.RE
.PP

.SS "float* mtrx::AABBCollider::GetHalfExtents ()\fC [inline]\fP"
Non const version of \fBGetHalfExtents()\fP
.PP
\fBReturns\fP
.RS 4
float* pointer to the array of halfExtents 
.RE
.PP

.SS "const float* mtrx::AABBCollider::GetHalfExtents () const\fC [inline]\fP"

.PP
Get the Half Extents of the AABB (This is the const version) 
.PP
\fBReturns\fP
.RS 4
const float* pointer to the array of half extents values in each dimension 
.RE
.PP

.SS "virtual float mtrx::AABBCollider::GetSize ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Calculate the size of an AABB defined as length * width * height\&. 
.PP
Implements \fBmtrx::IBoundingVolume\fP\&.
.SS "virtual bool mtrx::AABBCollider::RaycastCollision (const \fBRay\fP & ray)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Collision function between a ray and an AABB\&. 
.PP
\fBParameters\fP
.RS 4
\fIray\fP The ray that we will be checking collision on 
.RE
.PP
\fBSee also\fP
.RS 4
mtrx::ray
.RE
.PP
\fBReturns\fP
.RS 4
true If there is a collision 
.PP
false If there is no collision 
.RE
.PP

.PP
Reimplemented from \fBmtrx::ConvexShapeCollider\fP\&.
.SS "virtual void mtrx::AABBCollider::SetOrientation (const glm::quat & orientation)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
This function should not be used and is empty as AABBs should not change orientations\&. 
.PP
\fBParameters\fP
.RS 4
\fIorientation\fP 
.RE
.PP

.PP
Reimplemented from \fBmtrx::ConvexShapeCollider\fP\&.
.SS "virtual void mtrx::AABBCollider::SetScale (const glm::vec3 & scale)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Set the Scale object overriden to modify the halfExtents to represent scale change\&. 
.PP
\fBParameters\fP
.RS 4
\fIscale\fP The new scale vector of the AABB 
.RE
.PP

.PP
Reimplemented from \fBmtrx::ConvexShapeCollider\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MTRX Engine from the source code\&.
